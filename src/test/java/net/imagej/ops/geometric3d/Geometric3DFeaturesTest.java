package net.imagej.ops.geometric3d;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.imagej.ops.Ops.Geometric3D;
import net.imagej.ops.features.AbstractFeatureTest;
import net.imglib2.roi.Regions;
import net.imglib2.roi.labeling.LabelRegion;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.util.Pair;

import org.junit.Before;
import org.junit.Test;

/**
 * To get comparable values with ImageJ I used the same label as I read in
 * {@link Geometric3DFeaturesTest#createLabelRegion3D()} and did the
 * measurements with the 3D ImageJ Suite
 * (http://imagejdocu.tudor.lu/doku.php?id=plugin:stacks:3d_ij_suite:start).
 * 
 * The Convexhull Volume and Surface Area is tested against qhull (qhull.org).
 * As an input for qhull I used the points generated by MarchingCubes.
 * 
 * @author Tim-Oliver Buchholz, University of Konstanz.
 *
 */
public class Geometric3DFeaturesTest extends AbstractFeatureTest {

	private Map<String, Double> results = new HashMap<String, Double>();
	private LabelRegion<String> region;

	@Before
	public void setup() {

		try {
			region = createLabelRegion3D();
		} catch (MalformedURLException exc) {
			// TODO Auto-generated catch block
			exc.printStackTrace();
		} catch (IOException exc) {
			// TODO Auto-generated catch block
			exc.printStackTrace();
		}
	}
	
	/**
	 * Test the {@link Solidity} Op.
	 */
	@Test
	public void testSolidity() {
		// This test is just here for completeness.
		// All input values of solidity are verified.
		assertEquals(Geometric3D.Solidity.NAME, 0.902, ops.geometric3d().Solidity(region).get(),
				AbstractFeatureTest.BIG_DELTA);
	}
	
	/**
	 * Test the {@link Rugosity} Op.
	 */
	@Test
	public void testRugosity() {
		// This test is just here for completeness.
		// All input values of convexity are verified.
		assertEquals(Rugosity.NAME, 1.099, results.get(Rugosity.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link Convexity} Op.
	 */
	@Test
	public void testConvexity() {
		// This test is just here for completeness.
		// All input values of convexity are verified.
		assertEquals(Convexity.NAME, 0.910, results.get(Convexity.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link ConvexHullSurfacePixel} Op.
	 */
	@Test
	public void testConvexHullSurfacePixel() {
		// Verified by hand. qhull merges faces and therefore has another number
		// of
		// surface pixels
		assertEquals(ConvexHullSurfacePixel.NAME, 616,
				results.get(ConvexHullSurfacePixel.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link ConvexHullSurfaceArea} Op.
	 */
	@Test
	public void testConvexHullSurfaceArea() {
		// value taken from qhull (qhull.org)
		assertEquals(ConvexHullSurfaceArea.NAME, 19133.663,
				results.get(ConvexHullSurfaceArea.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link ConvexHullVolumeFeature} Op.
	 */
	@Test
	public void testConvexHullVolume() {
		// value taken from qhull (qhull.org)
		assertEquals(ConvexHullVolume.NAME, 234284.5,
				results.get(ConvexHullVolume.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testSurfaceArea() {
		// value taken from imagej
		// The delta is relatively big because they use float numbers in imagej
		// and my implementation is based on doubles.
		assertEquals(SurfaceArea.NAME, 21025.018, results.get(SurfaceArea.NAME),
				0.186);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testSurfacePixel() {
		// value taken from imagej
		assertEquals(SurfacePixel.NAME, 29738, results.get(SurfacePixel.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testVolume() {
		// value taken from imagej
		assertEquals(Volume.NAME, 211296, results.get(Volume.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testCompactness() {
		// value taken from imagej
		assertEquals(Compactness.NAME, 0.192, results.get(Compactness.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testSphericity() {
		// value taken from imagej
		assertEquals(Sphericity.NAME, 0.577, results.get(Sphericity.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testMainElongation() {
		// value taken from imagej
		assertEquals(MainElongation.NAME, 1.312,
				results.get(MainElongation.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testMedianElongation() {
		// value taken from imagej
		assertEquals(MedianElongation.NAME, 1.126,
				results.get(MedianElongation.NAME), 
				AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Test the {@link AreaFeature} Op.
	 */
	@Test
	public void testSpareness() {
		// value taken from imagej
		assertEquals(Spareness.NAME, 0.970, results.get(Spareness.NAME),
				AbstractFeatureTest.BIG_DELTA);
	}
}

/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.convert;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import java.math.BigInteger;

import net.imagej.ops.AbstractOpTest;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.numeric.complex.ComplexFloatType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;

import org.junit.Test;

/**
 * Tests the {@link ConvertTypes} ops.
 *
 * @author Alison Walter
 */
public class TestConvertType extends AbstractOpTest{
#foreach ($type in $types)
#set ($className = "ConvertTypes.ComplexTo$type.op")
#set ($methodName = "Types.$type.cast")
#foreach ($type2 in $types)
	/** Tests {@link $className}. */
	@Test
	public void test${type2.op}To${type.op}() {
		final $type2.imglibT b = new ${type2.imglibT}(${type2.posValue});
		final Object result = ops.convert().${type.built}(b);
		assertTrue(result instanceof $type.imglibT);

#if ($type.op.equals("Cfloat32"))
		assertEquals($methodName(${type2.posReal}), ((${type.imglibT})result).getRealFloat(), 0);
		assertEquals($methodName(${type2.posImag}), ((${type.imglibT})result).getImaginaryFloat(), 0);
#if ($type2.op.contains("C"))
		b.set($type2.zeroValue, $type2.zeroValue);
#else
		b.set($type2.zeroValue);
#end
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).getRealFloat(), 0);
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).getImaginaryFloat(), 0);

#elseif ($type.op.equals("Cfloat64"))
		assertEquals($methodName(${type2.posReal}), ((${type.imglibT})result).getRealDouble(), 0);
		assertEquals($methodName(${type2.posImag}), ((${type.imglibT})result).getImaginaryDouble(), 0);

#if ($type2.op.contains("C"))
		b.set($type2.zeroValue, $type2.zeroValue);
#else
		b.set($type2.zeroValue);
#end
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).getRealDouble(), 0);
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).getImaginaryDouble(), 0);

#elseif ($type.op.contains("Float"))
		assertEquals($methodName(${type2.posReal}), ((${type.imglibT})result).get(), 0);

#if ($type2.op.contains("C"))
		b.set($type2.zeroValue, $type2.zeroValue);
#else
		b.set($type2.zeroValue);
#end
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).get(), 0);
#else
		assertEquals($methodName(${type2.posReal}), ((${type.imglibT})result).get());

#if ($type2.op.contains("C"))
		b.set($type2.zeroValue, $type2.zeroValue);
#else
		b.set($type2.zeroValue);
#end
		assertEquals($type.zeroValue, ops.convert().${type.built}(b).get());
#end

#if ($type2.negValue)
		b.set($type2.negValue);
#if ($type.op.equals("Cfloat32"))
		assertEquals($methodName(${type2.negReal}), ops.convert().${type.built}(b).getRealFloat(), 0);
		assertEquals($methodName(${type2.negImag}), ops.convert().${type.built}(b).getImaginaryFloat(), 0);
#elseif ($type.op.equals("Cfloat64"))
		assertEquals($methodName(${type2.negReal}), ops.convert().${type.built}(b).getRealDouble(), 0);
		assertEquals($methodName(${type2.negImag}), ops.convert().${type.built}(b).getImaginaryDouble(), 0);
#elseif($type.op.contains("Float"))
		assertEquals($methodName(${type2.negReal}), ops.convert().${type.built}(b).get(), 0);
#else
		assertEquals($methodName(${type2.negReal}), ops.convert().${type.built}(b).get());
#end
#end
	}

#end
#end
}
